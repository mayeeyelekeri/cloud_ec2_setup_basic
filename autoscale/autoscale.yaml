Description: "Create Autoscaling"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm

  albStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: alb

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

Resources:
 ec2WaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT10M
        
 template:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment1: Install httpd
      "AWS::CloudFormation::Init":
        configSets:
          setup:
            - install_httpd
            - install_codedeploy_agent
        install_docker:
          packages:
            yum:
              httpd: []
          commands:
            create_user:
              command: "echo created from template > /var/www/html/index.html"
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      LaunchTemplateName: 
        !Sub '{{resolve:ssm:/${environment}/autoscale/template_name}}'  
      LaunchTemplateData: 
        SecurityGroupIds: 
          - Fn::ImportValue: 
             Fn::Sub: "${permStackName}-PUBLIC-SG"
        InstanceType: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/instance_type}}'
        ImageId: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/ami_id}}'
        KeyName: 
          !Sub '{{resolve:ssm:/${environment}/ec2/keyname}}'
        UserData:
         Fn::Base64:
          !Sub | 
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource template --configsets setup --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2WaitCondition --region ${AWS::Region}
 scalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myautogroup
      LaunchTemplate: 
        LaunchTemplateId: !Ref template  
        Version: !GetAtt template.LatestVersionNumber
      VPCZoneIdentifier: 
          - Fn::ImportValue: 
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET1"
          - Fn::ImportValue: 
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET2"
      MinSize: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_min}}'  
      MaxSize: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_max}}'  
      DesiredCapacity: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_desired}}'  
      TargetGroupARNs: 
          - Fn::ImportValue: 
             Fn::Sub: "${albStackName}-TARGET-GROUP"
        
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", " auto"] ]
         PropagateAtLaunch: true
       - Key: Environment
         Value: !Sub ${environment}	
         PropagateAtLaunch: true

Outputs:
  LoadBalancer:
    Value: !Ref template
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-TEMPLATE"
  AutoscaleGroup:
    Value: !Ref scalingGroup
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-AUTOSCALE-GROUP"


