# File: autoscale.yaml 
# This module create 2 EC2 instances  
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" values 
#
# Resource that would be created
# 1) EC2 Image template  
# 2) Autoscaling group   
Description: "Create EC2 template and Autoscaling group"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm

  albStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: alb

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

  welcomeMessage: 
    Type: String 
    Default: Great Learning 
    
# 2 Resources (EC2 Template, AutoScaling Group)
Resources:

  # Set a timeout of 06 minutes, else it fails 
  ec2WaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT15M
        
  # Create EC2 template and install httpd up and running 
  # Inputs: 
  #  Parameter store values 
  #  1) Template name
  #  2) Instance Type 
  #  3) Image Id 
  #  4) Key name 
  #
  #  From the "permissions" stack
  #  5) Security Group ID  
  #  
  #  6) WaitCondition from resource (10 minutes timeout) 
  #
  myEC2template:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
          Comment1: Install httpd
          "AWS::CloudFormation::Init":
            configSets:
              basicSetup: 
                - install_httpd
            install_httpd:
              packages:
                yum:
                  httpd: []
              files:                
                "/var/www/html/index.html":
                    content:
                       <h1> Hello from cfn-init </h1> 
                       <br>
                "/var/www/html/another.html": 
                    content: !Sub |
                        <h1> ${welcomeMessage} from the stack ${AWS::StackName} </h1>
                "/etc/cfn/cfn-hup.conf":
                    content: !Sub |
                       [main]
                       stack=${AWS::StackId}
                       region=${AWS::Region}
                       # The interval used to check for changes to the resource metadata in minutes. Default is 15
                       interval=2
                       mode: "000400"
                       owner: "root"
                       group: "root"
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                    content: !Sub |
                      [cfn-auto-reloader-hook]
                      triggers=post.update
                      path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                      action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource myEC2template --region ${AWS::Region}
                      mode: "000400"
                      owner: "root"
                      group: "root"
              commands: 
                getIpAddress: 
                    command: "echo Public IP Address: `curl http://checkip.amazonaws.com` >> /var/www/html/index.html"
              services:
                sysvinit:
                  httpd:
                    enabled: true
                    ensureRunning: true
    Properties:
      LaunchTemplateName: 
        !Sub '{{resolve:ssm:/${environment}/autoscale/template_name}}'
      LaunchTemplateData: 
        SecurityGroupIds: 
          - Fn::ImportValue: 
             Fn::Sub: "${permStackName}-PUBLIC-SG"
        InstanceType: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/instance_type}}'
        ImageId: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/ami_id}}'
        KeyName: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/keyname}}'
        UserData:
         Fn::Base64:
          !Sub | 
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource myEC2template --configsets basicSetup --region ${AWS::Region}
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2WaitCondition --region ${AWS::Region}
  # Create an autoscaling group using the template above 
  # Inputs: 
  #  From Parameter store
  #  1) Autoscale min value 
  #  2) Autoscale max value  
  #  3) Autoscale desired value 
  #  4) Key name 
  #
  #  From the "ALB" stack
  #  5) Target Group ID  
  #  
  #  6) EC2 Template reference 
  #
  myAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myautoscalinggroup
      LaunchTemplate: 
        LaunchTemplateId: !Ref myEC2template
        Version: !GetAtt myEC2template.LatestVersionNumber
      VPCZoneIdentifier: 
          - Fn::ImportValue: 
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET1"
          - Fn::ImportValue: 
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET2"
      MinSize: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_min}}'  
      MaxSize: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_max}}'  
      DesiredCapacity: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_desired}}'  
      TargetGroupARNs: 
          - Fn::ImportValue: 
             Fn::Sub: "${albStackName}-TARGET-GROUP"
        
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", " auto"] ]
         PropagateAtLaunch: true
       - Key: Environment
         Value: !Sub ${environment}	
         PropagateAtLaunch: true

Outputs:
  LoadBalancer:
    Value: !Ref myEC2template
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-TEMPLATE"
  AutoscaleGroup:
    Value: !Ref myAutoscalingGroup
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-AUTOSCALE-GROUP"


